*  What is the difference between OAuth 2.0 and OpenID Connect?
      * OAuth 2.0 is a protocol for authorization, allowing applications to obtain limited access to user accounts on an HTTP service. 
        It provides authorization flows for web, desktop, and mobile applications.
      * OpenID Connect (OIDC) is an identity layer built on top of OAuth 2.0, adding user authentication to OAuth's authorization.
        It allows clients to verify the identity of an end-user based on the authentication performed by an authorization server, as well as to obtain basic profile information about the user.
      Key Difference: OAuth 2.0 is mainly concerned with authorization (who can access what resources), while OIDC adds authentication (verifying the user's identity).

* How does the OAuth 2.0 Authorization Code Flow work?
      * The client application redirects the user to the authorization server with a request for authorization.
      * The user authenticates and consents to the requested permissions.
      * The authorization server redirects the user back to the client with an authorization code.
      * The client exchanges the authorization code for an access token (and optionally a refresh token) by making a secure request to the authorization server.
      * The access token is then used to access protected resources on behalf of the user.

* Explain JWT. Why is it commonly used in modern web authentication?
      * JWT (JSON Web Token) is a compact, URL-safe token format used to securely transmit information between parties as a JSON object.
        It is digitally signed using a secret or a public/private key pair.
      * Structure: A JWT is made up of three parts: Header, Payload, and Signature, separated by dots (.).
      * Why Use JWT?:
        * Stateless Authentication: JWT is self-contained, meaning it can store user information and does not require server-side session storage.
        * This is similar to having a stamped ticket that allows you entry to a concert—you don’t need to be on a list at the gate, you just show the ticket (JWT), and if it's valid, you get in.
        * Scalable: Ideal for microservices architectures where user sessions can be validated without requiring centralized storage.
        * Security: The signature ensures that the token cannot be tampered with. Using algorithms like RSA allows for more secure signature verification.

* What are the potential security vulnerabilities of OAuth 2.0, and how can they be mitigated?
      * Authorization Code Interception: If the authorization code is intercepted before being exchanged for a token, it can be used by an attacker.
          Mitigation: Use PKCE (Proof Key for Code Exchange), especially for public clients like mobile apps. PKCE adds an additional layer of security by requiring a code challenge and verifier.
      * Token Leakage: Access tokens may be leaked through URLs if not handled properly
          Mitigation: Use authorization code flow with server-side token exchange instead of the implicit flow, as tokens are not exposed in URLs.
      * Redirect URI Manipulation: An attacker may manipulate the redirect URI to send the authorization code to an unintended location.
          Mitigation: Use whitelisted redirect URIs and ensure that the redirect URIs are validated strictly.

* What is a refresh token, and how does it improve security?
      * A refresh token is a credential used to obtain a new access token without requiring the user to re-authenticate. It is typically issued along with an access token during the authorization process.
      * Why Use It?
          * Improves Security: The access token is short-lived, reducing the window of time in which a stolen token could be used.
          * User Experience: Users don’t need to log in again when the access token expires, as the application can use the refresh token to request a new one.
      * Security Consideration: Refresh tokens should be stored securely, as they can be used to generate new access tokens.

* How does role-based access control (RBAC) differ from attribute-based access control (ABAC)?
      * RBAC: Access rights are assigned based on roles, and users are assigned to roles. Roles define what actions can be performed on resources.
      * Example: A user with the admin role may have full access, while a user with the viewer role has read-only access.
      * ABAC: Access is determined based on attributes of the user, resource, and environment. Policies define how attributes (such as user department, time of access, or resource sensitivity) affect access control.
      * Example: A policy might state that users in the finance department can access financial_reports between 9 AM and 5 PM.

* What are the best practices for securely storing user passwords in a database?
      * Hashing: Passwords should never be stored in plain text. Use a cryptographic hashing function like bcrypt, scrypt, or Argon2.
      * Salting: Add a unique salt (random data) to each password before hashing to prevent attackers from using precomputed hash tables (rainbow tables).
      * Peppering: Use a secret value known as a pepper to add an extra layer of security before hashing.


* What is the difference between stateless and stateful authentication?
      * Stateless Authentication: The server does not store any user session data. Instead, the client includes all necessary information (e.g., in a JWT) with each request. 
        The server verifies the token's signature to validate the user.
             * Pros: Scalable, since no session storage is required on the server side.
             * Cons: Token revocation is difficult because tokens are valid until they expire
      * Stateful Authentication: The server maintains user session data, usually stored in a session store or database. The client holds a session ID that the server uses to look up session data.
             * Pros: Easier to revoke sessions or invalidate sessions.
             * Cons: Less scalable due to the need for session storage.

* Explain OAuth 2.0 scopes and how they are used.
     * Scopes define the permissions or access levels that a client is requesting from the resource server. They limit the access granted by an access token.
     * Example: A client might request the scope read:user to read user data or write:posts to create new post
     * Role of Scopes: Scopes help to ensure that the client only has the minimal required access to a user’s data, following the principle of least privilege.
     * Example in Use: During the authorization process, users can be prompted to grant or deny specific scopes requested by the client.

* How do you ensure secure API authentication and authorization between microservices?
     * Mutual TLS (mTLS): Use mutual TLS to ensure that both client and server verify each other's identity.
     * JWT: Use signed JWTs to represent the identity of the calling service, along with necessary scopes or claims.
     * API Gateway: Implement an API Gateway to centralize authentication and authorization checks before requests reach backend services.
     * Service Mesh: Use a service mesh (e.g., Istio) to handle mTLS, enforce authorization policies, and manage secure communication between microservices.




