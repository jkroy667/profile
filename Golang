* What is a Go routine? How does it differ from a thread?
    A goroutine is a lightweight thread managed by the Go runtime. It is cheaper in terms of resources compared to an OS-level thread.
    While threads are scheduled by the OS, goroutines are scheduled by the Go runtime, allowing Go to manage many goroutines efficiently using a small number of threads.

* What is a slice in Go, and how is it different from an array?
    In Go, a slice is a dynamic, resizable sequence of elements, whereas an array has a fixed size.
    Array: Has a fixed length and cannot grow or shrink. You must specify its size when you declare it.
      var arr [3]int = [3]int{1, 2, 3} // Fixed size: 3 elements
    Slice: Is built on top of arrays and can grow or shrink as needed. It has a length (number of elements) and a capacity (total underlying array size).
      slice := []int{1, 2, 3} // Dynamic size: can add more elements

* How does Go handle error handling?
    Go uses a simple pattern for error handling, where functions return an error as a second return value. If err is nil, no error occurred; otherwise, you handle the error:

* What is a struct in Go?
    A struct is a composite data type that groups together variables under a single name. These variables are known as fields.

* What is the difference between make and new in Go?
    In Go, make and new are used for creating and allocating memory, but they serve different purposes:
    make: Used to create and initialize slices, maps, and channels. It allocates memory and also initializes the object so it’s ready to use.
      slice := make([]int, 5) // Creates a slice with length 5
    new: Used to allocate memory for a zeroed value of a specific type (like an integer, struct, etc.). It returns a pointer to the newly allocated memory.  
      num := new(int) // Creates a pointer to an int with value 0

* What is a defer statement in Go?
    A defer statement defers the execution of a function until the surrounding function returns. It’s often used for resource cleanup, like closing a file.

* How do you implement an interface in Go?
    An interface in Go is a type that specifies a set of method signatures. A type implements an interface by implementing all of its methods. There is no explicit keyword for implementing interfaces:

* What are channels in Go, and how do you use them?
    Channels are used for communication between goroutines. They provide a way for goroutines to synchronize by sending and receiving values:
        ch := make(chan int)
        go func() {
            ch <- 5 // Send value 5 to channel
        }()
        value := <-ch // Receive value from channel
        fmt.Println(value) // Output: 5


* How does Go manage memory, and what is garbage collection?
    Go uses a garbage collector to automatically manage memory. It identifies which objects are no longer reachable and frees their memory, preventing memory leaks.
    This makes Go simpler to use compared to languages that require explicit memory management, though it may introduce some latency due to GC cycles.

* What are the advantages of using Go over other languages like Python or Java?
    Concurrency:
        Go has built-in support for concurrency through goroutines, making it easier to write programs that can do many tasks at the same time. This is more efficient than Python’s threading and simpler than Java’s thread management.
    Performance:
        Go is a compiled language, meaning it turns code into machine code directly. This makes it faster than Python, which is interpreted, and often closer in performance to Java. It's great for building high-performance web servers and backend services.
    Simplicity and Readability:
        Go has a simple syntax and a small set of features, which makes it easier to learn and use. Unlike Java, it doesn’t have complex features like inheritance, which keeps code readable and easy to maintain.
    Cross-Platform Compilation:
        Go can compile programs into a single binary that works on different operating systems (like Windows, macOS, and Linux). This makes deployment much easier compared to languages like Python, which often needs environment-specific setups.
    Memory Management:
        Go has a garbage collector that automatically manages memory, making it easier than languages like C or C++ where you have to manually manage memory. This gives it a balance between performance and ease of use, closer to Java but simpler.
    Strong Standard Library:    
        Go comes with a rich standard library that includes packages for web servers, networking, file handling, and more. This means you can build a lot of functionality without needing many external libraries, unlike Python.

* How does Go achieve concurrency internally?
    Go's runtime uses a model called GOMAXPROCS, which specifies the maximum number of OS threads to use for executing goroutines.
    Go schedules goroutines onto a small number of OS threads, multiplexing them as needed.
    It uses M scheduling, where multiple goroutines (M) run on fewer OS threads (N).

* How do you handle race conditions in Go?
    Race conditions can be detected using the -race flag:
        go run -race main.go
    To handle race conditions, use sync.Mutex for locking shared data or sync.WaitGroup for waiting for goroutines to finish.
    Example with sync.Mutex:
        var mu sync.Mutex
        mu.Lock()
        // critical section
        mu.Unlock()

* What is a context in Go, and why is it important?
    The context package in Go provides a way to carry deadlines, cancellation signals, and other request-scoped values across API boundaries and goroutines.
    It’s particularly useful for managing timeouts and cancellation of goroutines:
        ctx, cancel := context.WithTimeout(context.Background(), time.Second)
        defer cancel()
        select {
        case <-ctx.Done():
            fmt.Println("Timeout or cancellation")
        case result := <-ch:
            fmt.Println("Received:", result)
        }

* What is the difference between sync.Mutex and sync.RWMutex?
    sync.Mutex provides mutual exclusion, allowing only one goroutine to access a critical section at a time.
    sync.RWMutex allows multiple readers but only one writer. It’s useful when most operations are read-heavy, as it allows multiple goroutines to read simultaneously
        var rw sync.RWMutex
        rw.RLock()  // For reading
        rw.RUnlock()
        rw.Lock()   // For writing
        rw.Unlock()

* What is the purpose of the panic and recover functions in Go?
    panic: It is used to stop the normal execution of a program and can be used to raise an error in exceptional cases.
    recover: It is used to regain control of a panicking goroutine. It can be used inside a defer function to handle a panic.
        func main() {
        defer func() {
            if r := recover(); r != nil {
                fmt.Println("Recovered from panic:", r)
            }
        }()
        panic("Something went wrong")
        }

* What are variadic functions in Go?
    Variadic functions accept a variable number of arguments. The syntax uses ... before the parameter type.
        func sum(nums ...int) int {
        total := 0
        for _, num := range nums {
            total += num
        }
        return total
        }
    
    fmt.Println(sum(1, 2, 3, 4)) // Output: 10

* What does the select statement do in Go?
    The select statement is used with channels to handle multiple channel operations. It allows a goroutine to wait on multiple communication operations
        func main() {
        ch1 := make(chan string)
        ch2 := make(chan string)
    
        go func() { ch1 <- "hello" }()
        go func() { ch2 <- "world" }()
    
        select {
        case msg1 := <-ch1:
            fmt.Println("Received:", msg1)
        case msg2 := <-ch2:
            fmt.Println("Received:", msg2)
        }
    }

* What is the purpose of sync.WaitGroup in Go?
    sync.WaitGroup is used to wait for a collection of goroutines to finish executing. You increment the WaitGroup counter for each goroutine and call Done() when a goroutine finishes.
    Wait() blocks until the counter becomes zero.
        var wg sync.WaitGroup
        wg.Add(1)
        go func() {
            defer wg.Done()
            fmt.Println("Goroutine finished")
        }()
        wg.Wait()

* What is the difference between a buffered and unbuffered channel in Go?
    Unbuffered Channel:
        Has a capacity of zero.
        Sends and receives block until both the sender and receiver are ready.
        Used for synchronization between goroutines.
            ch := make(chan int) // Unbuffered channel
    Buffered Channel:
        Has a capacity greater than zero.
        Sends do not block until the channel is full, and receives do not block until the channel is empty.
        Allows a limited number of values to be stored in the channel without an immediate receiver.
            ch := make(chan int, 5) // Buffered channel with capacity 5

* How do you use type assertions with interfaces in Go?
    var i interface{} = "hello"
    str, ok := i.(string)
    if ok {
        fmt.Println(str) // Output: hello
    }






