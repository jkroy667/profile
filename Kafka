1. What are the traditional methods of message transfer? How is Kafka better from them?
    * Traditional methods of message transfer include message queues (like RabbitMQ) and publish-subscribe systems (like JMS). 
      These systems often have limitations in scalability, fault tolerance, and handling large volumes of real-time data.
    * Kafka is better because it offers:
        * Scalability through partitioning and replication across multiple brokers.
        * Fault tolerance by replicating data across nodes.
        * High throughput for handling large amounts of data with low latency.
        * Durability with persistent storage.
        * Decoupling of producers and consumers allowing consumers to read messages at their own pace.

2. What are the major components of Kafka?
    * The major components of Kafka are:
        * Producer: Publishes messages to topics.
        * Consumer: Subscribes to topics and processes messages.
        * Broker: Stores and manages messages in partitions.
        * Topic: A category to which records are sent.
        * Partition: A division of a topic for parallel processing.
        * ZooKeeper: Manages metadata and coordinates the Kafka cluster. (Note: Being replaced by KRaft in newer versions).

3. What do you mean by a Partition in Kafka?
    * A partition in Kafka is a subdivision of a topic that stores an ordered sequence of records. Partitions allow Kafka to distribute data across multiple brokers, enabling parallel processing and scalability.
    * Each partition is identified by an offset, which helps consumers keep track of the messages they have read.

4. What do you mean by zookeeper in Kafka and what are its uses?
    * ZooKeeper in Kafka is a centralized service used for managing metadata, coordinating brokers, and tracking the status of nodes in a Kafka cluster.
    * It helps with leader election for partitions, managing configurations, and maintaining information about topics, brokers, and consumer groups, ensuring the reliability and high availability of the Kafka cluster.

5. Can we use Kafka without Zookeeper? 
    * Kafka can now be used without ZooKeeper as of version 2.8. The release of Kafka 2.8.0 in April 2021 gave us all the opportunity to try it out without ZooKeeper.
    * However, this version is not yet ready for production and lacks some key features.

6. Explain the concept of Leader and Follower in Kafka.
    * Leader: Handles all read and write requests for a partition. It is the primary replica.
    * Followers: Replicate data from the leader to ensure data redundancy. If the leader fails, one of the followers is promoted to become the new leader. This ensures high availability.

7. Why is Topic Replication important in Kafka? What do you mean by ISR in Kafka?
    * Topic replication in Kafka ensures data durability and high availability by storing multiple copies of a partition across different brokers. If a broker fails, replicas on other brokers ensure that data is not lost and remain accessible.
    * ISR (In-Sync Replicas) are replicas that are fully synchronized with the leader. They are up-to-date with the latest data and can be promoted to leader if the current leader fails, ensuring reliability in data replication.

8. What do you understand about a consumer group in Kafka?
    * A consumer group in Kafka is a group of consumers that work together to read data from a topic.
    * Each message in a partition is consumed by only one consumer in the group, allowing for load balancing.
    * Multiple consumer groups can read the same data independently, enabling different applications to process data concurrently.

9. What is the maximum size of a message that Kafka can receive?
    * By default, the maximum size of a Kafka message is 1MB (megabyte). The broker settings allow you to modify the size. Kafka, on the other hand, is designed to handle 1KB messages as well.

10. What are some of the features of Kafka?
    * Kafka is a messaging system built for high throughput and fault tolerance.
    * Kafka has a built-in patriation system known as a Topic.
    * Kafka Includes a replication feature as well.
    * Kafka provides a queue that can handle large amounts of data and move messages from one sender to another.
    * Kafka can also save the messages to storage and replicate them across the cluster.
    * For coordination and synchronization with other services, Kafka collaborates with Zookeeper.

11. What are some of the disadvantages of Kafka?
    * Complexity: Setting up and managing a Kafka cluster can be complex
    * Resource Intensive: Kafka can consume significant system resources, especially in high-throughput scenarios.
    * Message Ordering: While messages are ordered within partitions, cross-partition ordering is not guaranteed.
    * Latency: In some cases, there may be higher latency compared to other messaging systems for certain use cases.

12. Tell me about some of the real-world usages of Apache Kafka.
    * Log Aggregation: Collecting and consolidating logs from multiple services for analysis.
    * Stream Processing: Real-time data processing for applications like fraud detection and recommendation systems.
    * Event Sourcing: Storing state changes as a sequence of events for applications requiring audit trails.
    * Data Integration: Connecting various data sources and sinks, enabling data flow between systems.
    * Metrics Collection: Monitoring and analyzing metrics from different services in real-time for operational insights.

13. What are the benefits of using clusters in Kafka?
    * Kafka cluster is basically a group of multiple brokers. They are used to maintain load balance.
    * Because Kafka brokers are stateless, they rely on Zookeeper to keep track of their cluster state.
    * A single Kafka broker instance can manage hundreds of thousands of reads and writes per second, and each broker can handle TBs of messages without compromising performance.
    * Zookeeper can be used to choose the Kafka broker leader. Thus having a cluster of Kafka brokers heavily increases the performance.

14. Describe partitioning key in Kafka.
    * A partitioning key in Kafka is a key used to determine which partition of a topic a message will be sent to.
    * When a producer sends a message, it can specify a key, which Kafka uses to compute a hash. This hash determines the partition, ensuring that all messages with the same key are sent to the same partition.
    * This guarantees message order for that key and helps with load balancing across partitions.

15. What is the purpose of partitions in Kafka?
    * Partitions allow a single topic to be partitioned across numerous servers from the perspective of the Kafka broker. 
    * This allows you to store more data in a single topic than a single server can. 
    * If you have three brokers and need to store 10TB of data in a topic, one option is to construct a topic with only one partition and store all 10TB on one broker.
    * Another alternative is to build a three-partitioned topic and distribute 10 TB of data among all brokers. A partition is a unit of parallelism from the consumer's perspective








