g1. Design a Parking Lot:
    1. parking spot:
      * vehicle Type 
      * isAvailable
      * parking Number
      * isAvailable(), getVehicleType(), getParkingNumber(), parkVehicle(), unParkVehicle(), getParkedVehicle()
    2. Vehicle Interface
      * Car
      * Bike 
      * Truck
    3. Level
      * List<parkingSpot>
      * floor
      * parkVehicle(), unparkVehicle(), displayAvailability()
    4. ParkingLot 
      * List<level>
      * ParkingLot Instance 
      * getInstance(), addlevel(), parkVehicle(), unparkVehicle(), displayAvailability().

2. Design a Vending Machine
    1. Product 
        * name
        * price
        * getters and setters
    2. Inventory
        * Map<Product,Integer> products
        * addproduct(), removeProduct(), updateQuantity(), getQuantity(), isAvailable()
    3. VendingMachineState Interface
        * selectProduct()
        * addNote()
        * addCoin()
        * dispenseProduct()
        * returnChange()
    4. IdleState
    5. ReadyState
    6. dispenseState
    7. returnChangeState
    8. Coin
    9. Note
    10. VendingMachine
        * Instance, IdleState, ReadyState, despenseState, returnChangeState, CurrentState, selectedProduct, totalAmount
        * getInstance(), selectProduct(), insertCoin(), insertNote(), dispenseProduct(), returnChange(), setState(), getIdleState(), getReadyState(), getDispenseState(), getReturnChangeState()
        * getters and setters like => getSelectedProduct(), setSelectedProduct(), resetSelectedProduct(), getAmount(), resetAmount(), addCoin(), addNote().

3. Design an Elevator 
    1. Elevator
        * direction
        * List<Request> requests
        * currentFloor, ID, Capacity
        * addRequest(), getNextRequest(), getCapacity(), processRequests(), processRequest(), run(), getCurrentFloor()
    2. Request
        * sourceFloor, destinationFloor
        * getters and setters
    3. Direction enum 
        * up, down
    4. Elevator Controller
        * List<elevator> elevators
        * RequestElevator(), findOptimalElevator()

4. Design a Tic Tak Toe
    1. Player
        * name
        * Symbol
    2. Board
        * char[][] grid
        * movesCount
        * initBoard(), makeMove(row,col,symbol), isFull(), hasWinner(), printBoard().
    3. Game
        * Player1, Player2
        * Board
        * currentPlayer
        * Play(), SwitchPlayer(), getValidInput().

5. Design an ATM 
    1. Account   
        * AccountNumber 
        * balance
        * getAccountNumber(), getBalance(), credit(), debit()
    2. Card
        * CardNumber
        * pin 
        * getCardNumebr(), getPin()
    3. BankingSystem
        * Map<string,Account> accounts
        * createAccount(accountNumber, balance), getAccount(accountNumber), processTransaction(transaction)
    4. public Abstract class Transaction
        * TransactionId 
        * account 
        * amount
        * execute()
    5. public class WithdrawalTransaction extends Transaction 
        * constructor(transactionID, account,amount){super(transactionID, account,amount)}
        * execute() // account.debit
    6. public class DepositTransaction extends Transaction
        * constructor(transactionID, account,amount){super(transactionID, account,amount)}
        * execute() // account.credit 
    7. CashDispenser
        * cashAvailable
        * public synchronized void dispenseCash(int amount)
    8. ATM:
        * BankingServer
        * CashDispenser
        * authenticateUser(card,pin)
        * checkBalance(), withdrawCash(accountNumer,amaount), depositeCash()

6. Design a car rental system 
    1. Car:
        * make, model, year, rentalPricePerDay, licencePlate, available
        * different getters and setters
    2. Customer:
        * name 
        * drivingLicienceNumber
    3. Reservation:
        * ReservationID, Car, Customer, startDate, EndDate, totalPrice
        * constructor, calculateTotalPrice(), all getters
    4. RentalSystem:
        * Instance, Map<string,Car> cars, Map<string,Reservation> reservations, paymentProcessor
        * getInstance(), addCar(), removeCar(), SearchCar(), isCarAvailable(), makeReservation(), cancelReservation(), processPayment(), generateReservationId()
    5. PaymentProcesser Interface
        * public class CreditCardPaymentProcessor implements PaymentProcessor
        * public class PayPalPaymentProcessor implements PaymentProcessor

7. Design a Hotel Management System 
    1. Room:
        * Id, roomType, price, roomStatus
        * book(), checkIn(), CheckOut(), getID, getType, getPrice, getStatus.
    2. RoomStatus enum:
        * Available, occupied, Booked.
    3. RoomType enum:
        * single, double, deluxe, suite.
    3. guest:
        * id, name, email, phoneNumber
        * all getters 
    4. Reservation:
        * Id, Guest, room, checkInDate, checkOutDate, ReservationStatus
        * CancelReservation(), all getters
    5. ReservationStatus enum 
        * Confiremed, cancelled
    6. HotelManagementSystem
        * instance, Map<string,room>, Map<string,guest> guests, Map<string,Reservation> reservations.
        * addGuest(), getGuest(), addRoom(), getRoom()
        * public synchronized Reservation bookRoom(Guest guest, Room room, LocalDate checkInDate, LocalDate checkOutDate)
        * public synchronized void cancelReservation(String reservationId)
        * public synchronized void checkIn(String reservationId)
        * public synchronized void checkOut(String reservationId, Payment payment)
        




        
        



    
