1. Design a Parking Lot:
    1. parking spot:
      * vehicle Type 
      * isAvailable
      * parking Number
      * isAvailable(), getVehicleType(), getParkingNumber(), parkVehicle(), unParkVehicle(), getParkedVehicle()
    2. Vehicle Interface
      * Car
      * Bike 
      * Truck
    3. Level
      * List<parkingSpot>
      * floor
      * parkVehicle(), unparkVehicle(), displayAvailability()
    4. ParkingLot 
      * List<level>
      * ParkingLot Instance 
      * getInstance(), addlevel(), parkVehicle(), unparkVehicle(), displayAvailability().

2. Design a Vending Machine
    1. Product 
        * name
        * price
        * getters and setters
    2. Inventory
        * Map<Product,Integer> products
        * addproduct(), removeProduct(), updateQuantity(), getQuantity(), isAvailable()
    3. VendingMachineState Interface
        * selectProduct()
        * addNote()
        * addCoin()
        * dispenseProduct()
        * returnChange()
    4. IdleState
    5. ReadyState
    6. dispenseState
    7. returnChangeState
    8. Coin
    9. Note
    10. VendingMachine
        * Instance, IdleState, ReadyState, despenseState, returnChangeState, CurrentState, selectedProduct, totalAmount
        * getInstance(), selectProduct(), insertCoin(), insertNote(), dispenseProduct(), returnChange(), setState(), getIdleState(), getReadyState(), getDispenseState(), getReturnChangeState()
        * getters and setters like => getSelectedProduct(), setSelectedProduct(), resetSelectedProduct(), getAmount(), resetAmount(), addCoin(), addNote().

3. Design an Elevator 
    1. Elevator
        * direction
        * List<Request> requests
        * currentFloor, ID, Capacity
        * addRequest(), getNextRequest(), getCapacity(), processRequests(), processRequest(), run(), getCurrentFloor()
    2. Request
        * sourceFloor, destinationFloor
        * getters and setters
    3. Direction enum 
        * up, down
    4. Elevator Controller
        * List<elevator> elevators
        * RequestElevator(), findOptimalElevator()

4. Design a Tic Tak Toe
    1. Player
        * name
        * Symbol
    2. Board
        * char[][] grid
        * movesCount
        * initBoard(), makeMove(row,col,symbol), isFull(), hasWinner(), printBoard().
    3. Game
        * Player1, Player2
        * Board
        * currentPlayer
        * Play(), SwitchPlayer(), getValidInput().

5. Design an ATM 
    1. Account   
        * AccountNumber 
        * balance
        * getAccountNumber(), getBalance(), credit(), debit()
    2. Card
        * CardNumber
        * pin 
        * getCardNumebr(), getPin()
    3. BankingSystem
        * Map<string,Account> accounts
        * createAccount(accountNumber, balance), getAccount(accountNumber), processTransaction(transaction)
    4. public Abstract class Transaction
        * TransactionId 
        * account 
        * amount
        * execute()
    5. public class WithdrawalTransaction extends Transaction 
        * constructor(transactionID, account,amount){super(transactionID, account,amount)}
        * execute() // account.debit
    6. public class DepositTransaction extends Transaction
        * constructor(transactionID, account,amount){super(transactionID, account,amount)}
        * execute() // account.credit 
    7. CashDispenser
        * cashAvailable
        * public synchronized void dispenseCash(int amount)
    8. ATM:
        * BankingServer
        * CashDispenser
        * authenticateUser(card,pin)
        * checkBalance(), withdrawCash(accountNumer,amaount), depositeCash()

6. Design a car rental system 
    1. Car:
        * make, model, year, rentalPricePerDay, licencePlate, available
        * different getters and setters
    2. Customer:
        * name 
        * drivingLicienceNumber
    3. Reservation:
        * ReservationID, Car, Customer, startDate, EndDate, totalPrice
        * constructor, calculateTotalPrice(), all getters
    4. RentalSystem:
        * Instance, Map<string,Car> cars, Map<string,Reservation> reservations, paymentProcessor
        * getInstance(), addCar(), removeCar(), SearchCar(), isCarAvailable(), makeReservation(), cancelReservation(), processPayment(), generateReservationId()
    5. PaymentProcesser Interface
        * public class CreditCardPaymentProcessor implements PaymentProcessor
        * public class PayPalPaymentProcessor implements PaymentProcessor

7. Design a Hotel Management System 
    1. Room:
        * Id, roomType, price, roomStatus
        * book(), checkIn(), CheckOut(), getID, getType, getPrice, getStatus.
    2. RoomStatus enum:
        * Available, occupied, Booked.
    3. RoomType enum:
        * single, double, deluxe, suite.
    3. guest:
        * id, name, email, phoneNumber
        * all getters 
    4. Reservation:
        * Id, Guest, room, checkInDate, checkOutDate, ReservationStatus
        * CancelReservation(), all getters
    5. ReservationStatus enum 
        * Confiremed, cancelled
    6. HotelManagementSystem
        * instance, Map<string,room>, Map<string,guest> guests, Map<string,Reservation> reservations.
        * addGuest(), getGuest(), addRoom(), getRoom()
        * public synchronized Reservation bookRoom(Guest guest, Room room, LocalDate checkInDate, LocalDate checkOutDate)
        * public synchronized void cancelReservation(String reservationId)
        * public synchronized void checkIn(String reservationId)
        * public synchronized void checkOut(String reservationId, Payment payment)
    7. Payment interface
        * boolean processPayment(double amount)
        * public class CashPayment implements Payment 
        * public class CreditCardPayment implements Payment

8. Design a social Media site like facebook
    1. User:
        * Id, name, email, password, profilePic, bio, List<string> friends, List<Post> posts.
        * all getters and setters
    2. Comment:
        * Id, userId, PostId, content, timestamp
        * all getters
    3. Post:
        * Id, userId, content, List<string> imageUrls, List<string> videoUrls, timestamp, List<string> likes, List<comment> comments
        * all getters
    4. Notification:
        * Id, userId, NotificationType, content, timestamp
        * all getters
    5. NotificationType Enum:
        * frientRequest, frientRequestAccepted, like, comment, mention
    6. SocialMediaService:
        * Instance, List<string,User> user, List<string,post> post, List<string,List<Notification>> notifications.
        * getInstance() 
        * registerUser(User user) // user.put(user.getId(),user)
        * loginUser(String email, String password) // check if the user present in the map and check its email and password
        * updateUserProfile(User user)
        * sendFriendRequest(String senderId, String receiverId) // create a new notification of frientRequest and add in map as key senderId
        * acceptFriendRequest(String userId, String friendId) // add in both friends list and also add in notification map
        * createPost(Post post) 
        * getNewsfeed(String userId)
        * likePost(String userId, String postId)
        * commentOnPost(Comment comment)
        * addNotification(String userId, Notification notification)
        * getNotifications(String userId)
        * generateNotificationId()

9. Design Restaurant management system
    1. Order:
        * Id, List<MenuItem> orderItems, orderStatus, timestamp, totalAmount.
        * setStatus(), getId(), getItems(), gettimestamp, getAmount()
    2. MenuItem:
        * Id, name, price, description, available
        * all getters
    3. Reservation:
        * Id, customerName, contactNumber, partySize, reservationTime
    4. OrderStatus enum:
        * pending, preparing, ready, completed, cancelled
    5. Staff:
        * ID, name, contactNumber, role.
    6. Payment:
        1. paymentMethod enum:
            * cash, creditCard, mobilePay
        2. payment:
            * Id, amount, method, status
        3. paymentStatus enum
            * pending, completed, failed
    6. RestrauntManagementSystem:
        * Instance, List<MenuItem> menu, Map<Integer,order> orders, List<Reservation> reservation, Map<Integer,payment> payments, List<Staff> staffs
        * getInstance() // singleton
        * addMenuItem()
        * removeMenuItem()
        * List<MenuItem> getMenu()
        * placeOrder()
        * notifyKitchen()
        * makeReservation(), cancelReservation()
        * processPayment()
        * addStaff(), removeStaff(), notifyStaff()

10. Design a Airline Management System 
    1. Aircraft:
        * model, totalseats
    2. Passanger:
        * Id, name, email, phoneNumber
    3. Flight:
        1. flight:
            * flightNumber, source, destination, departureTime, ArrivalTime, List<seat> availableSeats
            * all getters
        2. FlightSearch:
            * List<flight> flights
            * searchFlight(source, destination, date)
    4. Seat:
        1. Seat:
            * number, seatType, seatStatus
        2. SeatType enum:
            * economy, premium_economy, bussinessClass, firstClass
        3. SeatStatus enum:
            * available, reserved, occupied
    5. Booking:
        1. Booking:
            * Id, passanger, flight, seat, bookingStatus, price
            * Cancel(), getBookingId()
        2. BookingManager:
            * Instance, Map<string,Booking> bookings, lock
            * createBooking(), cancelBooking()
        3. BookingStatus enum:
            * confirmed, cancelled, pending, expired
    6. Payment:
        1. paymentMethod enum:
            * cash, creditCard, mobilePay
        2. payment:
            * Id, amount, method, status
        3. paymentStatus enum
            * pending, completed, failed
        4. PaymentProcesssor:
            * Instance, processPayment()
    7. AirlineManagementSystem:
        * List<flight> flights, List<aircraft> aircrafts, flightSearch, BookingManager, paymentProcessor
        * addFlight(), addAircraft(), searchFlight(), bookFlight(), cancelFlight(), processPayment() 

11. Design an Digital Wallet.
    1. Account:
        * id, user, balance, AccountNumber, currency, List<Transaction> transactions
        * deposit(BigDecimal amount), withdraw(BigDecimal amount), addTransaction(), all getters
    2. User
        * id, name, email, phoneNumber, List<Account> accounts
        * addAccount(), removeAccount(), getId()
    3. public abstract class PaymentMethod
        * id, user
        * processPayment()
        1. public class BankAccount extends PaymentMethod
            * accountNumber, routingNumber
            * processPayment()
        2. public class CreditCard extends PaymentMethod
            * cardNumber, expirationDate, cvv
            * processPayment()
    4. Currency enum:
        * inr, usd, eur, jpy
    5. CurrencyConverter:
        * Map<currency,BigDecimal> exchangeRates
        * convert()
    6. Transaction:
        * id, sourceAccount, destinationAccount, currency, amount, timestamp.
        * all getters
    7. DigitalWallet:
        * Instance,  Map<String, User> users, Map<String, Account> accounts, Map<String, PaymentMethod> paymentMethods;
        * createUser(), getUser()
        * createAccount(), getAccount()
        * createPaymentMethod(), getPaymentMethod()
        * public synchronized void transferFunds(Account sourceAccount, Account destinationAccount, BigDecimal amount, Currency currency) 
        * getTransactionHistory(Account account)

12. Design Book My show:
    1. Movie:
        * Id, title, description, duration
        * all getters
    2. Theater:
        * Id, name, location, List<show> shows
    3. Show:
        * Id, movie, theater, startTime, endTime, map<string, seat> seats
        * all getters
    4. Booking 
        1. Booking:
            * Id, user, show, List<seat> seats, totalPrice, status.
            * all getters
        2. BookingStatus enum:
            * pending, confirmed, cancelled
    5. seat:
        1. seat:
            * Id, row, column, type, price, status
            * all getters
        2. seatType enum:
            * Normal, premium
        3. seatStatus enum:
            * available, booked
    6.User:
        * Id, name, email
    7. MovieTicketSystem:
        * Instance, List<Movies> movies, List<theater> theaters, Map<string,show> shows, Map<string,booking> bookings
        * getInstance(), addMovie(), addTheater(), addShow(), getMovies(), getTheaters(), getShow(show)
        * public synchronized Booking bookTickets(User user, Show show, List<Seat> selectedSeats)
        * areSeatsAvailable(Show show, List<Seat> selectedSeats)
        * markSeatsAsBooked(Show show, List<Seat> selectedSeats) 
        * calculateTotalPrice(List<Seat> selectedSeats)
        * generateBookingId()
        * confirmBooking(String bookingId), cancelBooking(String bookingId), markSeatsAsAvailable(Show show, List<Seat> seats);



        
        



    
