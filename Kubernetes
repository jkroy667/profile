1. Explain the concept of Container Orchestration.
     * It provides a automatic deployment, scaling, and management of containerized applications so that the developers do not have any worry about that the underlying infrastructure.

2. What is a Pod in Kubernetes ?
     * A cluster of one or more Linux containers makes up a Kubernetes pod. Smallest unit of kubernetes application.
     * kubctl get pods -n (namespace)

3. How does Kubernetes handle container scaling?
     * Kubernetes scales containers using the Horizontal Pod Autoscaler (HPA) for scaling pods, Vertical Pod Autoscaler (VPA) for adjusting resource limits, and Cluster Autoscaler for adjusting the number of nodes.

4. What is Kubelet ?
     * Kubelet is a Kubernetes agent that runs on each node, ensuring containers are running in pods as specified by the control plane. 
       It monitors pod health, manages container lifecycle, and communicates with the API server to ensure the desired state is maintained.

5. Explain the difference between a StatefulSet and a Deployment.
     * Deploymnet: It enables you to control your applicationâ€™s state and ensure that the right number of replicas are always running.
     * Statefulset: It helpful in managing stateful applications that need persistent storage with a dependable network ID.

6. What is a Service in Kubernetes?
     * A Service in Kubernetes is an abstraction that defines a stable network endpoint to expose a set of pods, enabling communication between components or external access to the pods.
       it ensures that traffic is evenly distributed among the pods.

7. How does Kubernetes manage configuration?
     * Kubernetes manages configuration using ConfigMaps for storing non-sensitive data like environment variables and Secrets for sensitive information like passwords.
       These can be mounted as files or environment variables in pods, allowing for dynamic configuration without rebuilding images.

8. Describe the role of a Master node in Kubernetes.
     * The Master node in Kubernetes controls the cluster, managing the API server, scheduler, controller manager, and etcd.
     * It handles scheduling of pods, monitors cluster state, manages workloads, and stores configuration data.

9. What is the role of the kube-proxy in Kubernetes and how does it facilitate communication between Pods?
     * The kube-proxy in Kubernetes manages network rules on each node to enable communication between pods.
     * It routes traffic to the correct pod within a service, ensuring load balancing and maintaining network connections between pods and external clients.

10. Explain the concept of Ingress in Kubernetes.
     * Ingress in Kubernetes is an API object that manages external access to services within a cluster, typically HTTP/HTTPS.
     * It defines routing rules, enabling services to be accessed through URLs, load balancing, SSL termination, and name-based virtual hosting.

11. What is ConfigMap ?
     * A ConfigMap in Kubernetes is an API object that allows you to store non-sensitive configuration data as key-value pairs.
     * It enables applications to access configuration information dynamically without hardcoding it into container images, making it easier to manage and update configurations.

12. Describe the role of etcd in Kubernetes.
     * etcd in Kubernetes is a distributed key-value store that serves as the primary data store for cluster configuration, state, and metadata.
     * It stores all cluster data, including information about nodes, pods, services, and configurations, ensuring consistency and reliability across the Kubernetes cluster.

13. How do rolling updates work in a Deployment?
     * In a Deployment, rolling updates gradually replace old pods with new ones to minimize downtime.
     * Kubernetes creates new pods with the updated configuration while keeping a specified number of old pods running.
     * Once the new pods are ready and healthy, the old pods are terminated, ensuring a smooth transition without service interruption.

14. What is a Namespace in Kubernetes? 
     * A Namespace in Kubernetes is a logical partitioning of the cluster that allows for grouping and isolating resources.
     * It enables multiple users or teams to share the same cluster while keeping their resources, such as pods, services, and deployments, organized and separated.

15. Explain the use of Labels and Selectors in Kubernetes.
     * Labels in Kubernetes are key-value pairs attached to objects (like pods) that provide metadata for organizing and selecting resources
     * Selectors are used to filter and identify sets of resources based on these labels, enabling operations such as grouping, management, and service targeting.

16. What is PV and PVC in kubernetes ?
     * A Persistent Volume (PV) in Kubernetes is a storage resource that provides persistent storage independent of pod lifecycle. 
     * A Persistent Volume Claim (PVC) is a user's request for storage, specifying size and access modes, which binds to a matching PV to allow pods to use that storage.

17. Explain the differences between a DaemonSet and a ReplicaSet.
     * A DaemonSet ensures that a copy of a pod runs on all (or specific) nodes in a Kubernetes cluster, typically used for background tasks like logging or monitoring.
     * A ReplicaSet ensures a specified number of identical pod replicas are running at all times, primarily used for scaling and maintaining application availability.

18. How can you achieve communication between Pods in different Nodes?
     * Pods in a cluster of k8s can speak to one another by default use the internal IP addresses. The underlying container runtime or network plugin gives a virtual network overlay to this communication.

19. What advantages does Kubernetes have?
      Container Orchestration
      Automated Load Balancing
      Auto Scaling
      Rolling Update & Rollbacks
      Service Discovery and Load Balancing
      Storage Orchestration
      Self-Healing
      Secrets and Configuration Management
      Multi-Cloud and Hybrid Cloud Support
      Role-Based Access Control (RBAC)
      Pods and Multi-Container Support
      Monitoring and Logging

20. What is the role of the kube-scheduler in Kubernetes?
     * The kube-scheduler in Kubernetes is responsible for assigning newly created pods to available nodes in the cluster.
     * It evaluates resource requirements, node constraints, and scheduling policies to ensure optimal placement of pods for performance and resource utilization.

21. How to setup kubernetes in AWS ?
    * Can Set Up Kubernetes on AWS Using kubeadm or Elastic Kubernetes Service(EKS)
    * Launch EC2 instances: Create a master node and at least one worker node.
    * Install Docker on all nodes:
    * Install kubeadm, kubelet, and kubectl
    * Then Init the master Node, Install pod network, Join worker Nodes.

22. Describe how a Horizontal Pod Autoscaler (HPA) works.
    * A Horizontal Pod Autoscaler (HPA) in Kubernetes automatically adjusts the number of pod replicas based on metrics like CPU utilization.
    * It scales pods up or down at specified intervals to maintain optimal performance and resource efficiency.

23. Explain the concept of Custom Resources in Kubernetes ?
    * Following a custom resource is installed, users can create and access its objects using kubectl, just like they do for built-in resources like Pods.
    * A custom resource is an extension of the Kubernetes API that is not always available in a default Kubernetes installation.
    * However, many core Kubernetes functions are now built using custom resources, making Kubernetes more modular.

24. How does Kubernetes handle security and access control?
    Kubernetes handles security and access control through:

    * RBAC (Role-Based Access Control): Defines permissions for users and groups to perform actions on resources.
    * Network Policies: Controls traffic between pods and services to enhance network security.
    * Secrets and ConfigMaps: Manages sensitive information and configuration data securely.
    * Pod Security Policies: Enforces security contexts for pods, defining what they can and cannot do.
    * Authentication and Authorization: Uses various methods (e.g., certificates, tokens) to verify users and grant access based on defined policies.

25. What is a Network Policy in Kubernetes?
    * A Network Policy in Kubernetes is a set of rules that defines how groups of pods can communicate with each other and with other network endpoints.
    * It allows users to specify which pods are allowed to receive traffic from or send traffic to other pods, enhancing security by controlling network access and isolating applications.

26. What is a Helm chart, and how is it used?
    * A Helm chart is a package that contains pre-configured Kubernetes resources and metadata to deploy applications on a Kubernetes cluster.
    * It simplifies the deployment and management of applications by allowing users to define, install, and upgrade complex applications easily.
    * Helm charts can be shared and reused, making it easier to manage applications consistently across different environments.

27. How does Kubernetes manage storage orchestration?
    * Kubernetes manages storage orchestration through Persistent Volumes (PVs) and Persistent Volume Claims (PVCs). PVs are storage resources in the cluster, while PVCs are requests for storage by users.

28. Explain the concept of Taints and Tolerations in Kubernetes.
    * Taints and Tolerations in Kubernetes are used to control which pods can be scheduled on specific nodes.
        * Taints are applied to nodes to mark them as unsuitable for certain pods, effectively repelling them.
        * Tolerations are added to pods to allow them to be scheduled on nodes with matching taints.

29. Describe the use of init containers in Kubernetes.
    * Init containers in Kubernetes run before the main application containers in a pod.
    * They perform setup tasks, such as initializing data or waiting for services, ensuring that the main containers start only when necessary conditions are met.

30. In Kubernetes, what are the various services available?
    * ClusterIP: Exposes the service on a cluster-internal IP, accessible only within the cluster.
    * NodePort: Exposes the service on each nodeâ€™s IP at a static port, allowing external access.
    * LoadBalancer: Creates an external load balancer (if supported by the cloud provider) to expose the service.
    * ExternalName: Maps a service to the DNS name of an external service, enabling service discovery.

31. explain the concept of a Custom Operator in Kubernetes.
    * Operators in Kubernetes use the Kubernetes API to automate tasks like deploying applications, scaling them up or down, and managing their overall health.
    * They act like custom tools that add new features to Kubernetes, making it easier to handle complex applications.
    * Operators are usually set up as custom controllers, which help keep everything running smoothly by defining how resources should be managed.

32. Describe the internals of the Kubernetes control plane.
    * The Kubernetes control plane is the brain of the Kubernetes cluster, responsible for managing its overall state. Key components include:
        * kube-apiserver: The API server that serves as the central point for all communication and REST operations in the cluster.
        * etcd: A distributed key-value store that stores all cluster data, configurations, and state information.
        * kube-scheduler: Responsible for assigning pods to nodes based on resource availability and scheduling policies.
        * kube-controller-manager: Manages controllers that handle routine tasks, such as scaling, replication, and monitoring the state of nodes and pods.
        * cloud-controller-manager: Integrates with cloud provider APIs for managing resources and services in cloud environments.

33. Explain the concept of Pod Disruption Budgets.
    * Pod Disruption Budgets (PDBs) in Kubernetes are policies that specify the minimum number or percentage of pods that must remain available during voluntary disruptions, such as node maintenance or scaling down

