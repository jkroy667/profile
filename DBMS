Topics for DBMS

* what is database ?
    A database is an organised collection of structured information, or data, typically stored electronically in a computer system. 

* what is DBMS ?
    A dbms helps to store and manage data in database. It acts as an interface between the user and the database enabling users to efficiently create,read,update,delete data into database while enabling 
    data security,integrity and concurency.

* what is RDMS and what are its properties ?
    Relational database management systems is a database system that is based on a relational model where data is stored in tables(relations) linked by keys. It allows to efficiently store,retrieve and 
    manipulate the structured data using SQL.
    -----properties of RDMS (ACID)------  
    1) Atomicity: It ensures that all part of transactions are completed. If not transaction get rollback to its initial state maintaining data consistancy.
    2) Consistency: Ensures data transaction from one valid state another, maintaining data integrity.
    3) Isolation: Ensures transactions are executed independently without any interference.
    4) Durabiltiy: Ensures that once transaction get commited, it is permanently stored, even in case of failure.

* What are the types of database language ?
    1) Data defination language (DDL): used to define and manage database schema. (CREATE, ALTER, DROP)
    2) Data Manipulation language (DML):  used to retrieve and manipulate data within the database. (SELECT, INSERT, UPDATE, DELETE)
    3) Data Control language (DCL): used to control data in the database. (GRANT,REVOKE)
    4) Transaction control language (TCL): used to manage transactions in the database. (COMMIT,ROLLBACK,SAVEPOINT)

* what is ACID properties ?
    To ensure consistency in database, certain properties are followed by the transations occured in the system.
    refer Q3

* Difference between vertical and horizontal scaling ?
    vertical scaling:
        * Involves adding more resources (CPU,RAM,Storage) to a single node or server.
        * Easier to implement but had hardware limitations and single point of failure for a system.
        * Suitable for apllications with limited growth requirements.
    Horizontal scaling: 
        * Involves adding more servers or nodes to distribute the load.
        * Provides better fault tolerance and can hangle larger growth.
        * Complex to handle but can scale infinitly according to the demand.

* What is Sharding ? 
    Sharding is a database partitioning technique where a large database is split into smaller and manageble peices called shards. Each shard contains a subset of data and is stored in seperate server.
    * purpose: improves performance and scalability by distributing load accross multiple servers.
    * Type: can be based on range based sharding or hash based sharding.
        * range-based sharding 
            Data is partitioned in shards based on sharding keys. (ex. user with id: 1-1000 -> shard1, 1001-2000 -> shard2......)
            Easy to implement but can lead to uneven data distribution if data is not uniformly distributed.
        * Hash-based sharding 
            Data is distributed by applying hashing to sharding keys. (hash_func(user_id)%no_of_shards).
            provides even data distribution and balances load across shards, but may make range queries much difficult.
            Consistent hashing can also be used it continouly adding or deleting the shards in the distribution.
    * Benfefits: Reduces query load, increase read/write throughput, and provides fault tolerance.

* Keys in DBMS ?
    keys are set of attributes, that can uniquely identify tuple/row/record in a relation/table.
    types of keys:
        * primary key: uniquely identifies each record in a table, must be unique and not NULL.
        * Foreign key: establishs a relation between table by refrencing the primary key of another table.
        * unique key: ensures that all values in a column or set of columns are unique accross the table. Can be null but only one null value is allowed if it is a single column key.
        * composite key: a primary key consists of 2 or more columns to uniquely identify the record.
        * candidate key: all the columns including primary key that can uniquiely identifies the record. One of the candidate key is a primary key.
        * Alternate key: a candidate key that is not selected as primary key.

* What are the types of relationships ?
    One-to-One(1:1):
        each record in one table is related to single record in another table and vice versa. ex. person table -- passport table
    One-to-many(1:n):
        single record in one table is related to multiple records in another table. person table -- order table
    many-to-may(n:n):   
        multiple record in one table is related to multiple records in another table. person table -- role table

* what is data Abstraction in DBMS ? what are its 3 levels ?
    Data abstraction refers to the process of hiding the underlying complexity of internal database and its structure from the user allowing them to interact with data without knowing its details.
    levels of Abstractions are:-
    * Physical(storage):
        lowest level of abstraction which defines how the data is actually stored in database. e.g, file storage, indexing etc.
    * logical(structure):
        the middle level of abstraction which defines what data is stored and its relationships among the data.
    * View(user perspective):
        the highest level of abstraction, provides only part of the database to the user and application.
    
* Indexing in database 
    Indexing in DBMS is a technique used to improve the speed of data retrieval operations on a database table by creating a data structure (index) that provides quick access to rows in the table.
    It works like a book index, allowing the database to find the desired data without scanning the entire table. Indexes can be created on columns to speed up queries involving those columns, especially in large databases.
        As u know database stores the data in disk and data structure stores the data in RAM. So in disk data is stored in tracks and sectors. so intersection of both makes a block in disk.
        so lets say each block can store 512Bits of data and the block offset becomes 0 to 511. 
        Now comes the question how to get this data much faster. lets say we have a table of 100 records and each record take 128bits of data.
        no. of records in 1 bloak  = 4, total no. of blocks required = 25.
        so to get a record we need to search 25 blocks in a disk. we can reduce this time by introducing index table of id and a pointer to that block. now size of index row =  16bits.
        no. of blocks required ~ 4 as 512/16 = 32 rows in 1 block and 100/32 ~ 4.
        now searching becomes 4 + 1 = 5 block reduced from 25 to 5 blocks.
        we can also create sparse of indexing (multi level indexing) by introducing index table of index table when the data becomes huge. let say we have 1000 records than blocks = 250, index block becomes = 40.
        this searching is also expensive therefore introduce another index table of index table which stores pointer to the block not record.
        therefore now the index table key value will be 1,33,.... with value as the pointer of the block. so blocks required for this  ~ 2. so search = 2 + 1 + 1 becomes 4 block only.

* Indexing vs Sharding 
    If your goal is to speed up query performance in a manageable-sized database, indexing is the better choice.
    If you need to handle massive data sets and scale out across multiple servers, sharding is more suitable.

* B trees and B+ trees
    It uses m-way search tree wit some rules and uses multi level indexing. watch abdul bari video.
    rules that b tree follow in m-way tree (m = no. of childeren) (k=no. of keys) and k = m-1
    1) no. of keys that a node will have = ceil(m/2) other than root node.
    2) root can have min 2 children.
    3) all the leaves are at same level. height = logm(n) where n is no of records and m =  max number of keys that a nodes can have.
    4) creation process is bottom up 
    difference between B tree and B+ tree is that in B+ tree all keys and their record pointer are stored in leave nodes and all leave nodes are connected through linked list. helps doing when we want
    data in range

* what is normalization ? and types of normalization ?
    It is a process of organizing data in database to reduce redunduncy by dividing a database into tables and defining relations between them to ensure that data is stored efficiently.
    Types of normalizations:
        * first normal form (1nf):
            elemeniate duplicate columns from the table. e.g, user,course1,course2 in a table to make user,course
        * second normal form (2nf):
            meets all requirements of 1nf. Ensuring non-key attributes are fully dependent on primary key.e.g, divide id,name,couse,instructor ---> id,name and id,course,instructor
        * third normal form (3nf):
            meets all requirements of 2nf. Ensuring non-key attributes ate only dependent on primary key.not on any other non-key attributes.It addresses transitive dependencies e.g, divide id,course,instructor ---> id,course and course,instructor.
        * Boyce-Codd Normal Form (BCNF):
            advance version of 3nf
    disadvantage of normalisation is that it increases complexity,performance overhead(joins),higher latency,maintanance overhead.

* what is denormalization ?
    Denormalization is a process of adding redunduncy in the database by combining tables or storing duplicate data to improve read performance. used to reduce number of joins
    benefits are:
        * improves read performance 
        * simplifies queries
    disadvantage:
        * needs more storage dure to redundancy
        * Risk of data Anomalies, can lead to data inconsistency since data is stored in different locations.
    when to use:
        * when read operation is more frequent than write

* what is functional dependency ?
    A functional dependency is a constraint that specifies the relationship between two sets of attributes where one set can accurately determine the value of other sets. It is denoted as X → Y,
    where X is a set of attributes that is capable of determining the value of Y. The attribute set on the left side of the arrow, X is called Determinant, while on the right side, Y is called 
    the Dependent. eg. user_id -> user_name

* what is ER diagram ?
    * It is a conceptual framework used to describe and design the structure of database.
    * It represents data in terms of entity(real-world object)(student,course), attibutes(properties of entity)(student_id,student_name,course_id) and
    relationships(association between entities)(student enrolls course, profressor teaches course).
    * 'is a' relation (inheritance) = shape -> triange,circle and 'has a' relation (association) = car -> engine

* what is Conflict serielization in dbms ?
    Conflict Serializability is a concept in DBMS that ensures the correctness of concurrent transaction execution. It checks whether a given schedule
    (sequence of operations) can be transformed into a serial schedule (where transactions are executed one after another) without altering the outcome.

* What is CCP ? (Concurrency Control Protocols) 
    Concurrency Control Protocols (CCP) manage simultaneous transactions in a database to ensure data consistency and integrity.
    * Lock-Based Protocols:
        Use locks to prevent multiple transactions from accessing the same data simultaneously.
    * Timestamp-Based Protocols:
        assigns unique timestamps to transactions and ensures operations are executed in timestamp order.
    * Validation Based Concurrency Control Protocol
         Allows transactions to execute without locks and checks for conflicts before committing.

* what are Entity, Entity Type, Entity Set, Weak Entity Set.
    Entity in DBMS is a real-world object with an existance. for example, in a College database, the entities can be Professor, Students, Courses, etc.
    The entity type is a collection of entity with similar attributes.
    Types of entity type:
        * strong entity type: In this entity type primary key is used to identify each entity uniquely. It is represented by rectangle
        * weak entity type: Weak entity type doesn't have a key attribute. It can't be identified on its own, it depends on some strong entity type for its unique identity.
    Entity set: An entity set is a collection of entities of the same entity type. It represents a set of all entities that belong to a particular entity type.
    
* what are SQL commands ? 

* what is Nested queries in SQL ?
    A nested query is a query that has another query embedded within it. The embedded query is called a subquery.e.g,
    * SELECT * FROM Employees WHERE Salary = (SELECT MAX(Salary) FROM Employees);
    * select E.ename from employee E where E.eid IN (select S.eid from salary S where S.regno=103);
    * SELECT EmployeeID, Salary FROM Employees e1 WHERE Salary > (SELECT AVG(Salary) FROM Employees e2 WHERE e1.DepartmentID = e2.DepartmentID);

* what are joins 
    joins in sql is used to combine rows from two or more tables based on a related column between them.
    * INNER JOIN:
        Returns only the rows where there is a match between the tables.
        Find employees and their departments where both have matching department IDs.
            SELECT Employees.EmployeeID, Employees.Name, Departments.DepartmentName
            FROM Employees
            INNER JOIN Departments ON Employees.DepartmentID = Departments.DepartmentID;
    * LEFT JOIN (or LEFT OUTER JOIN):
        Returns all the rows from the left table and matched rows from the right table. If there is no match, NULL values are returned for columns from the right table.
        Find all employees and their departments, including employees who do not belong to any department.
            SELECT Employees.EmployeeID, Employees.Name, Departments.DepartmentName
            FROM Employees
            LEFT JOIN Departments ON Employees.DepartmentID = Departments.DepartmentID;
    * RIGHT JOIN (or RIGHT OUTER JOIN)
        Returns all rows from the right table and matched rows from the left table. If there is no match, NULL values are returned for columns from the left table.
        Find all departments and their employees, including departments that have no employees.
            SELECT Employees.EmployeeID, Employees.Name, Departments.DepartmentName
            FROM Employees
            RIGHT JOIN Departments ON Employees.DepartmentID = Departments.DepartmentID;
    * FULL JOIN ( or FULL Outer join )
        Returns all rows when there is a match in one of the tables. It combines the results of both LEFT JOIN and RIGHT JOIN.
        Find all employees and all departments, including those without matches in the other table.
            SELECT Employees.EmployeeID, Employees.Name, Departments.DepartmentName
            FROM Employees
            FULL JOIN Departments ON Employees.DepartmentID = Departments.DepartmentID;
    * CROSS JOIN:
        Returns the Cartesian product of the two tables, meaning it combines every row from the first table with every row from the second table.
        Create a list of all possible combinations of employees and departments.
            SELECT Employees.EmployeeID, Departments.DepartmentName
            FROM Employees
            CROSS JOIN Departments;
    * SELF JOIN:
        A self join is a join where a table is joined with itself. It’s useful for querying hierarchical data or comparing rows within the same table.
        Find pairs of employees who work in the same department.
            SELECT e1.EmployeeID AS Employee1, e2.EmployeeID AS Employee2
            FROM Employees e1
            INNER JOIN Employees e2 ON e1.DepartmentID = e2.DepartmentID
            WHERE e1.EmployeeID <> e2.EmployeeID;

* Difference Between 2-Tier and 3-Tier Architecture
     * 2-Tier Architecture
        The application is divided into two layers, client and the server.
        Client directly interacts with the user and performs presentation logic.(eg. GUI), server manages database and business logic.
        Pros:
            simple to implement
        Cons:
            limited scalablity, tightly coupled, less secure as business logic is often exposed to the client.
    * 3-Tier Architecture
        The application is divided into 3 layers,client(presentation layer) middle tier(or bussiness layer logic), and the data layer.
        Client handles user interface and presentation logic. Middle layer or bussiness logic layer contains processing rule. data layer manages database and storage
        Pros: 
            Better scalability and flexibility and maintanability.
            Improved security by separating presentation, logic, and data layers
        Cons:
            More complex design and development
            Higher cost of deployment and maintenance.

* What is the difference between TRUNCATE and DELETE in SQL ?
    * DELETE 
        Remove specific row based on conditions (WHERE Cause)
        Can be rolled back while using transactions 
        Slower because it deletes rows one by one and logs each deletion.
        DELETE FROM Employees WHERE Department = 'IT';
    * TRUNCATE
        Remove all the rows from the table basically resetting it.
        Usually cannot be rollbacked depends on the DBMS.
        Faster since it deallocates entire data pages without logging individual deletions.
        TRUNCATE TABLE Employees;

* Difference Between Intension and Extension in a Database ?
    * Intension (Schema):
        Intensions define the schema or structure of a database table. It is fixed part of the database that defines table name,columns,data type,contraints and relationships.
        The schema definition of an Employees table with columns: ID (integer), Name (varchar), Department (varchar).
    * Extension (Instance):
        extension refers to the actual content or data stored in the database at any given time. It is the collections of all rows in a table.

* Difference between share lock and exclusive lock, definition of lock ?
    A lock in DBMS is a mechanism that controls access to data to ensure data integrity and consistency during concurrent transactions.
    Locks presents conflicts such as dirty reads,lost updates, and inconsistent reads.
    Dirty Read: Occurs when a transaction reads uncommitted data from another transaction, which may lead to inconsistencies if the other transaction rolls back.
    * Shared Lock (S-Lock):
        allows multiple transactions to read a data item simultaneously but prevents any transaction from modifying it.
    * Exclusive Lock (X-Lock):
        allows a single transaction to both read and modify a data item. It prevents any other transaction from reading or modifying the locked data.
        
